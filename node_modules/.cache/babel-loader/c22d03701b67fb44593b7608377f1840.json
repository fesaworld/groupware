{"remainingRequest":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/babel-loader/lib/index.js!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/eslint-loader/index.js??ref--14-0!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/src/middleware/check-auth.js","dependencies":[{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/src/middleware/check-auth.js","mtime":1673491775269},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/cache-loader/dist/cjs.js","mtime":1673491971474},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/babel-loader/lib/index.js","mtime":1673491971758},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/eslint-loader/index.js","mtime":1673491969842}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29tZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aCI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9qZHMvRG9jdW1lbnRzL2Rpc2tvbWluZm8vamRzL2RpZ2l0ZWFtL2dyb3Vwd2FyZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBzdG9yZSBmcm9tICdAL3N0b3JlJzsKaW1wb3J0IHsgZ2V0VG9rZW5Gcm9tQ29va2llIH0gZnJvbSAnLi4vbGliL2pzLWNvb2tpZSc7CmltcG9ydCB7IHNldFRva2VuLCBnZXROZXdUb2tlbiB9IGZyb20gJy4uL2xpYi9heGlvcyc7CnZhciBwdWJsaWNQYXRocyA9IFsnLycsICcvbG9naW4nXTsKCnZhciBpc1B1YmxpY1BhdGggPSBmdW5jdGlvbiBpc1B1YmxpY1BhdGgocGF0aCkgewogIGlmIChwYXRoID09PSAnLycpIHsKICAgIHJldHVybiB0cnVlOwogIH0KCiAgcmV0dXJuIHB1YmxpY1BhdGhzLnNvbWUoZnVuY3Rpb24gKHgpIHsKICAgIHJldHVybiBwYXRoLnN0YXJ0c1dpdGgoeCk7CiAgfSk7Cn07CgpleHBvcnQgZGVmYXVsdCAvKiNfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSh0bywgZnJvbSwgbmV4dCkgewogICAgdmFyIHQsIHJlc3VsdDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDA7CgogICAgICAgICAgICBpZiAoc3RvcmUuc3RhdGUuYXV0aC5pc0luaXRpYWxpemVkKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICB0ID0gZ2V0VG9rZW5Gcm9tQ29va2llKCk7CgogICAgICAgICAgICBpZiAodCkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgcmV0dXJuIGdldE5ld1Rva2VuKCk7CgogICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICByZXN1bHQgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQuYXV0aFRva2VuKSB7CiAgICAgICAgICAgICAgdCA9IHJlc3VsdC5hdXRoVG9rZW47CiAgICAgICAgICAgIH0KCiAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgIGlmICghdCkgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgc2V0VG9rZW4odCk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMjsKICAgICAgICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKCdhdXRoL2dldFVzZXJQcm9maWxlJyk7CgogICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE2OwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTQ7CiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oMCk7CgogICAgICAgICAgY2FzZSAxNjoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDE2OwogICAgICAgICAgICBzdG9yZS5jb21taXQoJ2F1dGgvQVVUSF9JTklUSUFMSVpFRCcpOwoKICAgICAgICAgICAgaWYgKHN0b3JlLnN0YXRlLmF1dGgudXNlciB8fCBpc1B1YmxpY1BhdGgodG8ucGF0aCkpIHsKICAgICAgICAgICAgICBuZXh0KCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgbmV4dCgnLycpOwogICAgICAgICAgICB9CgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDE2KTsKCiAgICAgICAgICBjYXNlIDIwOgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMCwgMTQsIDE2LCAyMF1dKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiAoX3gsIF94MiwgX3gzKSB7CiAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0pKCk7"},{"version":3,"sources":["/Users/jds/Documents/diskominfo/jds/digiteam/groupware/src/middleware/check-auth.js"],"names":["store","getTokenFromCookie","setToken","getNewToken","publicPaths","isPublicPath","path","some","x","startsWith","to","from","next","state","auth","isInitialized","t","result","authToken","dispatch","commit","user"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,SAAlB;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,cAAtC;AAEA,IAAMC,WAAW,GAAG,CAAC,GAAD,EAAM,QAAN,CAApB;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAU;AAC7B,MAAIA,IAAI,KAAK,GAAb,EAAkB;AAChB,WAAO,IAAP;AACD;;AACD,SAAOF,WAAW,CAACG,IAAZ,CAAiB,UAAAC,CAAC;AAAA,WAAIF,IAAI,CAACG,UAAL,CAAgBD,CAAhB,CAAJ;AAAA,GAAlB,CAAP;AACD,CALD;;AAOA;AAAA,qEAAe,iBAAOE,EAAP,EAAWC,IAAX,EAAiBC,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,gBAENZ,KAAK,CAACa,KAAN,CAAYC,IAAZ,CAAiBC,aAFX;AAAA;AAAA;AAAA;;AAGLC,YAAAA,CAHK,GAGDf,kBAAkB,EAHjB;;AAAA,gBAIJe,CAJI;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKcb,WAAW,EALzB;;AAAA;AAKDc,YAAAA,MALC;;AAMP,gBAAIA,MAAM,IAAIA,MAAM,CAACC,SAArB,EAAgC;AAC9BF,cAAAA,CAAC,GAAGC,MAAM,CAACC,SAAX;AACD;;AARM;AAAA,iBAULF,CAVK;AAAA;AAAA;AAAA;;AAWPd,YAAAA,QAAQ,CAACc,CAAD,CAAR;AAXO;AAAA,mBAYDhB,KAAK,CAACmB,QAAN,CAAe,qBAAf,CAZC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAkBXnB,YAAAA,KAAK,CAACoB,MAAN,CAAa,uBAAb;;AACA,gBAAIpB,KAAK,CAACa,KAAN,CAAYC,IAAZ,CAAiBO,IAAjB,IAAyBhB,YAAY,CAACK,EAAE,CAACJ,IAAJ,CAAzC,EAAoD;AAClDM,cAAAA,IAAI;AACL,aAFD,MAEO;AACLA,cAAAA,IAAI,CAAC,GAAD,CAAJ;AACD;;AAvBU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import store from '@/store'\nimport { getTokenFromCookie } from '../lib/js-cookie'\nimport { setToken, getNewToken } from '../lib/axios'\n\nconst publicPaths = ['/', '/login']\nconst isPublicPath = (path) => {\n  if (path === '/') {\n    return true\n  }\n  return publicPaths.some(x => path.startsWith(x))\n}\n\nexport default async (to, from, next) => {\n  try {\n    if (!store.state.auth.isInitialized) {\n      let t = getTokenFromCookie()\n      if (!t) {\n        const result = await getNewToken()\n        if (result && result.authToken) {\n          t = result.authToken\n        }\n      }\n      if (t) {\n        setToken(t)\n        await store.dispatch('auth/getUserProfile')\n      }\n    }\n  } catch (e) {\n    //\n  } finally {\n    store.commit('auth/AUTH_INITIALIZED')\n    if (store.state.auth.user || isPublicPath(to.path)) {\n      next()\n    } else {\n      next('/')\n    }\n  }\n}\n"]}]}