{"remainingRequest":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/babel-loader/lib/index.js!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/eslint-loader/index.js??ref--14-0!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/src/api/index.js","dependencies":[{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/src/api/index.js","mtime":1673491775258},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/cache-loader/dist/cjs.js","mtime":1673491971474},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/babel-loader/lib/index.js","mtime":1673491971758},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/eslint-loader/index.js","mtime":1673491969842}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubGFzdC1pbmRleC1vZiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzIjsKaW1wb3J0IF9vYmplY3RTcHJlYWQgZnJvbSAiL1VzZXJzL2pkcy9Eb2N1bWVudHMvZGlza29taW5mby9qZHMvZGlnaXRlYW0vZ3JvdXB3YXJlL2dyb3Vwd2FyZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCBfdmFsdWVzIGZyb20gJ2xvZGFzaC92YWx1ZXMnOwppbXBvcnQgeyBkYiwgc3RvcmFnZSwgVGltZXN0YW1wIH0gZnJvbSAnQC9saWIvZmlyZWJhc2UnOwppbXBvcnQgeyBET0NVTUVOVF9UWVBFIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Qcm9maWxlL0VkaXQvdXRpbHMnOwovKioKICogIEBlbnVtIHtzdHJpbmd9IC0gZmlyZWJhc2Ugc3RvcmFnZSBmb2xkZXIKKi8KCmV4cG9ydCB2YXIgU1RPUkFHRSA9IHsKICBFTVBMT1lFRV9ET0NVTUVOVFM6ICdlbXBsb3llZV9kb2N1bWVudHMnCn07Ci8qKgogKiAgQGVudW0ge3N0cmluZ30gLSBmaXJlYmFzZSBzdG9yYWdlIGNvbGxlY3Rpb24KKi8KCmV4cG9ydCB2YXIgQ09MTEVDVElPTiA9IHsKICBVU0VSUzogJ3VzZXJzJwp9OyAvLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCi8qKgogKiBCYXNpYyBoYW5kbGVyIHdoZW4gdXNlcklkIGlzIG5vdCBkZWZpbmVkIGFzIGZ1bmN0aW9uIHBhcmFtCiAqIEBwYXJhbSB7c3RyaW5nfSBjYWxsZXIgLSBmdW5jdGlvbiBuYW1lCiAqIEByZXR1cm5zIHtQcm9taXNlfQogKi8KCmZ1bmN0aW9uIGhhbmRsZU5vVXNlcklkKGNhbGxlcikgewogIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgUmVmZXJlbmNlRXJyb3IoIiIuY29uY2F0KGNhbGxlciwgIjogaWQgbXVzdCBiZSBzdXBwbGllZCciKSkpOwp9Ci8qKgogKiBHZXQgc3RvcmVkIGZpbGUgbWV0YWRhdGEKICogQHBhcmFtIHtzdHJpbmd9IHB1YmxpY1VSTCAtIHB1YmxpYyBVUkwgb2Ygc3RvcmVkIGZpbGUgaW4gRmlyZWJhc2UgU3RvcmFnZSwgdGhlIG9uZSB0aGF0IHN0YXJ0cyB3aXRoIGh0dHBzOi8vIGluc3RlYWQgb2YgZ3M6Ly8KICogQHJldHVybnMge1Byb21pc2V9IGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG1ldGFkYXRhIGluIHR5cGVvZiBvYmplY3QKICovCgoKZXhwb3J0IGZ1bmN0aW9uIGdldFN0b3JlZEZpbGVNZXRhZGF0YShwdWJsaWNVUkwpIHsKICByZXR1cm4gc3RvcmFnZS5yZWZGcm9tVVJMKHB1YmxpY1VSTCkuZ2V0TWV0YWRhdGEoKTsKfQovKioKICogR2V0IHVzZXIgYWNjb3VudCBkYXRhCiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gaWQgLSB1c2VyIGlkCiAqIEByZXR1cm5zIHtvYmplY3R8bnVsbH0gdXNlciBkYXRhIGlmIGV4aXN0cwogKi8KCmV4cG9ydCBmdW5jdGlvbiBnZXRVc2VyQnlJZChpZCkgewogIGlmICghaWQpIHJldHVybiBoYW5kbGVOb1VzZXJJZCgnZ2V0VXNlckJ5SWQnKTsKICByZXR1cm4gZGIuY29sbGVjdGlvbihDT0xMRUNUSU9OLlVTRVJTKS5kb2MoaWQpLmdldCgpLnRoZW4oZnVuY3Rpb24gKGRvYykgewogICAgaWYgKGRvYy5leGlzdHMpIHsKICAgICAgcmV0dXJuIGRvYy5kYXRhKCk7CiAgICB9CgogICAgcmV0dXJuIG51bGw7CiAgfSk7Cn0KLyoqCiAqIEluc2VydCBvciB1cGRhdGUgdXNlciBwcm9maWxlIGRldGFpbAogKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHVzZXJJZAogKiBAcGFyYW0ge29iamVjdH0gZGF0YQogKiBAcmV0dXJucyB7UHJvbWlzZX0KICovCgpleHBvcnQgZnVuY3Rpb24gdXBzZXJ0VXNlclByb2ZpbGVEZXRhaWwodXNlcklkLCBkYXRhKSB7CiAgaWYgKCF1c2VySWQpIHJldHVybiBoYW5kbGVOb1VzZXJJZCgidXBkYXRlVXNlclBlcnNvbmFsRGF0YSIpOwogIGlmICghZGF0YSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgnbm9vcCcpOwogIHJldHVybiBkYi5jb2xsZWN0aW9uKENPTExFQ1RJT04uVVNFUlMpLmRvYyh1c2VySWQpLnVwZGF0ZShfb2JqZWN0U3ByZWFkKHsKICAgIHVwZGF0ZWRfYXQ6IFRpbWVzdGFtcC5ub3coKQogIH0sIGRhdGEpKTsKfQovKioKICogSW5zZXJ0IG9yIHVwZGF0ZSB1c2VyIGRvY3VtZW50IHRvIGZpcmViYXNlIHN0b3JhZ2UKICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSB1c2VySWQKICogQHBhcmFtIHtzdHJpbmd9IGRvY3VtZW50VHlwZQogKiBAcGFyYW0ge0ZpbGV9IGZpbGUKICogQHBhcmFtIHtGdW5jdGlvbn0gb25Qcm9ncmVzcyAtIGEgZnVuY3Rpb24gdGhhdCByZWNlaXZlcyAocHJvZ3Jlc3M6IG51bWJlciwgc25hcHNob3Q6IFVwbG9hZFRhc2suc25hcHNob3QpIGFzIGFyZ3VtZW50cwogKiBAcmV0dXJucyB7UHJvbWlzZT59IHRoZSByZXNvbHZlZCBVUkwgb2Ygc3RvcmVkIGZpbGUKICovCgpleHBvcnQgZnVuY3Rpb24gdXBzZXJ0VXNlckRvY3VtZW50KHVzZXJJZCwgZG9jdW1lbnRUeXBlLCBmaWxlLCBvblByb2dyZXNzKSB7CiAgaWYgKCF1c2VySWQpIHJldHVybiBoYW5kbGVOb1VzZXJJZCgndXBzZXJ0VXNlckRvY3VtZW50Jyk7CiAgaWYgKCFmaWxlKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCdub29wJyk7CgogIHZhciBhbGxvd2VkVHlwZXMgPSBfdmFsdWVzKERPQ1VNRU5UX1RZUEUpOwoKICB2YXIgc2hvdWxkUHJvY2VlZCA9IGFsbG93ZWRUeXBlcy5pbmNsdWRlcyhkb2N1bWVudFR5cGUpOwoKICBpZiAoIXNob3VsZFByb2NlZWQpIHsKICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgUmVmZXJlbmNlRXJyb3IoInVwc2VydFVzZXJEb2N1bWVudDogZG9jdW1lbnQgdHlwZSBtdXN0IGJlIG9uZSBvZiAiLmNvbmNhdChhbGxvd2VkVHlwZXMuam9pbignLCAnKSkpKTsKICB9CgogIHZhciBleHQgPSBmaWxlLm5hbWUuc3Vic3RyaW5nKGZpbGUubmFtZS5sYXN0SW5kZXhPZignLicpICsgMSk7CiAgdmFyIHN0b3JhZ2VSZWYgPSBzdG9yYWdlLnJlZigpLmNoaWxkKCIiLmNvbmNhdChTVE9SQUdFLkVNUExPWUVFX0RPQ1VNRU5UUywgIi8iKS5jb25jYXQodXNlcklkLCAiLyIpLmNvbmNhdChkb2N1bWVudFR5cGUsICItIikuY29uY2F0KHVzZXJJZCwgIi4iKS5jb25jYXQoZXh0KSk7CiAgdmFyIHVwbG9hZFRhc2sgPSBzdG9yYWdlUmVmLnB1dChmaWxlKTsKCiAgaWYgKHR5cGVvZiBvblByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7CiAgICB1cGxvYWRUYXNrLm9uKCdzdGF0ZV9jaGFuZ2VkJywgZnVuY3Rpb24gKHNuYXBzaG90KSB7CiAgICAgIHZhciBwcm9ncmVzcyA9IE1hdGguY2VpbChzbmFwc2hvdC5ieXRlc1RyYW5zZmVycmVkIC8gc25hcHNob3QudG90YWxCeXRlcyAqIDEwMCk7CiAgICAgIG9uUHJvZ3Jlc3MocHJvZ3Jlc3MsIHNuYXBzaG90KTsKICAgIH0pOwogIH0KCiAgcmV0dXJuIHVwbG9hZFRhc2sudGhlbihmdW5jdGlvbiAoc25hcHNob3QpIHsKICAgIHJldHVybiBzbmFwc2hvdC5yZWYuZ2V0RG93bmxvYWRVUkwoKTsKICB9KTsKfQpleHBvcnQgZnVuY3Rpb24gZGVsZXRlVXNlckRvY3VtZW50KHVzZXJJZCwgZmlsZVB1YmxpY1VSTCkgewogIGlmICghdXNlcklkKSByZXR1cm4gaGFuZGxlTm9Vc2VySWQoJ2RlbGV0ZVVzZXJEb2N1bWVudCcpOwogIGlmICghZmlsZVB1YmxpY1VSTCkgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBSZWZlcmVuY2VFcnJvcignZGVsZXRlVXNlckRvY3VtZW50OiBmaWxlUHVibGljVVJMIG11c3QgYmUgc3VwcGxpZWQnKSk7CiAgdmFyIHN0b3JhZ2VSZWYgPSBzdG9yYWdlLnJlZkZyb21VUkwoZmlsZVB1YmxpY1VSTCk7CiAgcmV0dXJuIHN0b3JhZ2VSZWYuZGVsZXRlKCk7Cn0="},{"version":3,"sources":["/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/src/api/index.js"],"names":["_values","db","storage","Timestamp","DOCUMENT_TYPE","STORAGE","EMPLOYEE_DOCUMENTS","COLLECTION","USERS","handleNoUserId","caller","Promise","reject","ReferenceError","getStoredFileMetadata","publicURL","refFromURL","getMetadata","getUserById","id","collection","doc","get","then","exists","data","upsertUserProfileDetail","userId","resolve","update","updated_at","now","upsertUserDocument","documentType","file","onProgress","allowedTypes","shouldProceed","includes","join","ext","name","substring","lastIndexOf","storageRef","ref","child","uploadTask","put","on","snapshot","progress","Math","ceil","bytesTransferred","totalBytes","getDownloadURL","deleteUserDocument","filePublicURL","delete"],"mappings":"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","sourcesContent":["import _values from 'lodash/values'\n\nimport { db, storage, Timestamp } from '@/lib/firebase'\n\nimport { DOCUMENT_TYPE } from '../components/Profile/Edit/utils'\n\n/**\n *  @enum {string} - firebase storage folder\n*/\nexport const STORAGE = {\n  EMPLOYEE_DOCUMENTS: 'employee_documents'\n}\n\n/**\n *  @enum {string} - firebase storage collection\n*/\nexport const COLLECTION = {\n  USERS: 'users'\n}\n\n// =================================================================================\n/**\n * Basic handler when userId is not defined as function param\n * @param {string} caller - function name\n * @returns {Promise}\n */\nfunction handleNoUserId (caller) {\n  return Promise.reject(new ReferenceError(`${caller}: id must be supplied'`))\n}\n\n/**\n * Get stored file metadata\n * @param {string} publicURL - public URL of stored file in Firebase Storage, the one that starts with https:// instead of gs://\n * @returns {Promise} a promise that resolves metadata in typeof object\n */\nexport function getStoredFileMetadata (publicURL) {\n  return storage.refFromURL(publicURL).getMetadata()\n}\n\n/**\n * Get user account data\n * @param {string|number} id - user id\n * @returns {object|null} user data if exists\n */\nexport function getUserById (id) {\n  if (!id) return handleNoUserId('getUserById')\n  return db\n    .collection(COLLECTION.USERS)\n    .doc(id)\n    .get()\n    .then(doc => {\n      if (doc.exists) {\n        return doc.data()\n      }\n      return null\n    })\n}\n\n/**\n * Insert or update user profile detail\n * @param {string|number} userId\n * @param {object} data\n * @returns {Promise}\n */\nexport function upsertUserProfileDetail (userId, data) {\n  if (!userId) return handleNoUserId(`updateUserPersonalData`)\n  if (!data) return Promise.resolve('noop')\n\n  return db\n    .collection(COLLECTION.USERS)\n    .doc(userId)\n    .update({\n      updated_at: Timestamp.now(),\n      ...data\n    })\n}\n\n/**\n * Insert or update user document to firebase storage\n * @param {string|number} userId\n * @param {string} documentType\n * @param {File} file\n * @param {Function} onProgress - a function that receives (progress: number, snapshot: UploadTask.snapshot) as arguments\n * @returns {Promise>} the resolved URL of stored file\n */\nexport function upsertUserDocument (userId, documentType, file, onProgress) {\n  if (!userId) return handleNoUserId('upsertUserDocument')\n  if (!file) return Promise.resolve('noop')\n\n  const allowedTypes = _values(DOCUMENT_TYPE)\n  const shouldProceed = allowedTypes.includes(documentType)\n  if (!shouldProceed) {\n    return Promise.reject(new ReferenceError(`upsertUserDocument: document type must be one of ${allowedTypes.join(', ')}`))\n  }\n\n  const ext = file.name.substring(file.name.lastIndexOf('.') + 1)\n  const storageRef = storage.ref().child(`${STORAGE.EMPLOYEE_DOCUMENTS}/${userId}/${documentType}-${userId}.${ext}`)\n  const uploadTask = storageRef.put(file)\n  if (typeof onProgress === 'function') {\n    uploadTask.on('state_changed', (snapshot) => {\n      const progress = Math.ceil((snapshot.bytesTransferred / snapshot.totalBytes) * 100)\n      onProgress(progress, snapshot)\n    })\n  }\n  return uploadTask\n    .then(snapshot => {\n      return snapshot.ref.getDownloadURL()\n    })\n}\n\nexport function deleteUserDocument (userId, filePublicURL) {\n  if (!userId) return handleNoUserId('deleteUserDocument')\n  if (!filePublicURL) return Promise.reject(new ReferenceError('deleteUserDocument: filePublicURL must be supplied'))\n\n  const storageRef = storage.refFromURL(filePublicURL)\n  return storageRef.delete()\n}\n"]}]}