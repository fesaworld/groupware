{"remainingRequest":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/babel-loader/lib/index.js!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/eslint-loader/index.js??ref--14-0!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/src/store/modules/logbook-list.js","dependencies":[{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/src/store/modules/logbook-list.js","mtime":1673491775271},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/cache-loader/dist/cjs.js","mtime":1673491971474},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/babel-loader/lib/index.js","mtime":1673491971758},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/eslint-loader/index.js","mtime":1673491969842}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZyI7CmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAiL1VzZXJzL2pkcy9Eb2N1bWVudHMvZGlza29taW5mby9qZHMvZGlnaXRlYW0vZ3JvdXB3YXJlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllcyI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy9qZHMvRG9jdW1lbnRzL2Rpc2tvbWluZm8vamRzL2RpZ2l0ZWFtL2dyb3Vwd2FyZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9qZHMvRG9jdW1lbnRzL2Rpc2tvbWluZm8vamRzL2RpZ2l0ZWFtL2dyb3Vwd2FyZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC9jbG9uZURlZXAnOyAvLyBpbXBvcnQgcE1pbkRlbGF5IGZyb20gJ3AtbWluLWRlbGF5JwoKaW1wb3J0IHsgR3JvdXB3YXJlQVBJIH0gZnJvbSAnLi4vLi4vbGliL2F4aW9zJzsKZXhwb3J0IHZhciBzdGF0ZSA9IGZ1bmN0aW9uIHN0YXRlKCkgewogIHJldHVybiB7CiAgICBsb2dib29rSW5WaWV3OiBudWxsCiAgfTsKfTsKZXhwb3J0IHZhciBtdXRhdGlvbnMgPSB7CiAgc2V0TG9nYm9va0luVmlldzogZnVuY3Rpb24gc2V0TG9nYm9va0luVmlldyhzdGF0ZSwgbG9nYm9vaykgewogICAgc3RhdGUubG9nYm9va0luVmlldyA9IF9jbG9uZURlZXAobG9nYm9vayk7CiAgfQp9OwpleHBvcnQgdmFyIGFjdGlvbnMgPSB7CiAgZ2V0TG9nYm9va0xpc3Q6IGZ1bmN0aW9uIGdldExvZ2Jvb2tMaXN0KF9yZWYpIHsKICAgIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzOwogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgdmFyIHN0YXRlLCBjb21taXQsIHBhcmFtcywgZ2V0OwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlLCBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgICBwYXJhbXMgPSBfYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgX2FyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3VtZW50c1sxXSA6IHt9OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBHcm91cHdhcmVBUEkuZ2V0KCcvbG9nYm9vay8nLCB7CiAgICAgICAgICAgICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoewogICAgICAgICAgICAgICAgICBzb3J0OiAnZGF0ZVRhc2ssX2lkJwogICAgICAgICAgICAgICAgfSwgcGFyYW1zKQogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHIpIHsKICAgICAgICAgICAgICAgIHJldHVybiByLmRhdGE7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgZ2V0ID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBnZXQpOwoKICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSgpOwogIH0sCiAgZ2V0TG9nYm9va0J5SWQ6IGZ1bmN0aW9uIGdldExvZ2Jvb2tCeUlkKF8sIF9yZWYyKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIGlkOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGlkID0gX3JlZjIuaWQ7CgogICAgICAgICAgICAgIGlmICghKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycgfHwgIWlkLmxlbmd0aCkpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignaWQgaXMgZWl0aGVyIGVtcHR5IG9yIG5vdCBhIHN0cmluZycpKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIEdyb3Vwd2FyZUFQSS5nZXQoImxvZ2Jvb2svIi5jb25jYXQoaWQpKS50aGVuKGZ1bmN0aW9uIChyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gci5kYXRhOwogICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGxvZ2Jvb2spIHsKICAgICAgICAgICAgICAgIHZhciBfbG9nYm9vayRkb2N1bWVudFRhc2sgPSBsb2dib29rLmRvY3VtZW50VGFzaywKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudFRhc2sgPSBfbG9nYm9vayRkb2N1bWVudFRhc2sgPT09IHZvaWQgMCA/IHt9IDogX2xvZ2Jvb2skZG9jdW1lbnRUYXNrLAogICAgICAgICAgICAgICAgICAgIF9sb2dib29rJGV2aWRlbmNlVGFzayA9IGxvZ2Jvb2suZXZpZGVuY2VUYXNrLAogICAgICAgICAgICAgICAgICAgIGV2aWRlbmNlVGFzayA9IF9sb2dib29rJGV2aWRlbmNlVGFzayA9PT0gdm9pZCAwID8ge30gOiBfbG9nYm9vayRldmlkZW5jZVRhc2ssCiAgICAgICAgICAgICAgICAgICAgYmxvYlRhc2sgPSBsb2dib29rLmJsb2JUYXNrLAogICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRCeSA9IGxvZ2Jvb2suY3JlYXRlZEJ5LAogICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRCeSA9IGxvZ2Jvb2sudXBkYXRlZEJ5LAogICAgICAgICAgICAgICAgICAgIF9fdiA9IGxvZ2Jvb2suX192LAogICAgICAgICAgICAgICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMobG9nYm9vaywgWyJkb2N1bWVudFRhc2siLCAiZXZpZGVuY2VUYXNrIiwgImJsb2JUYXNrIiwgImNyZWF0ZWRCeSIsICJ1cGRhdGVkQnkiLCAiX192Il0pOwoKICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZXN0LCB7CiAgICAgICAgICAgICAgICAgIGRvY3VtZW50VGFza1BhdGg6IGRvY3VtZW50VGFzay5maWxlUGF0aCwKICAgICAgICAgICAgICAgICAgZG9jdW1lbnRUYXNrVVJMOiBkb2N1bWVudFRhc2suZmlsZVVSTCwKICAgICAgICAgICAgICAgICAgZXZpZGVuY2VUYXNrUGF0aDogZXZpZGVuY2VUYXNrLmZpbGVQYXRoLAogICAgICAgICAgICAgICAgICBldmlkZW5jZVRhc2tVUkw6IGV2aWRlbmNlVGFzay5maWxlVVJMCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSkoKTsKICB9LAogIGluc2VydExvZ2Jvb2s6IGZ1bmN0aW9uIGluc2VydExvZ2Jvb2soXywgcGF5bG9hZCkgewogICAgcmV0dXJuIEdyb3Vwd2FyZUFQSS5wb3N0KCcvbG9nYm9vay8nLCBwYXlsb2FkKTsKICB9LAogIHVwZGF0ZUxvZ2Jvb2s6IGZ1bmN0aW9uIHVwZGF0ZUxvZ2Jvb2soXykgewogICAgdmFyIF9yZWYzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwKICAgICAgICBpZCA9IF9yZWYzLmlkLAogICAgICAgIHBheWxvYWQgPSBfcmVmMy5wYXlsb2FkOwoKICAgIGlmICghaWQpIHsKICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcignaWQgbXVzdCBiZSBwcm92aWRlZCcpKTsKICAgIH0KCiAgICByZXR1cm4gR3JvdXB3YXJlQVBJLnB1dCgiL2xvZ2Jvb2svIi5jb25jYXQoaWQpLCBwYXlsb2FkKTsKICB9Cn07"},{"version":3,"sources":["/Users/jds/Documents/diskominfo/jds/digiteam/groupware/src/store/modules/logbook-list.js"],"names":["_cloneDeep","GroupwareAPI","state","logbookInView","mutations","setLogbookInView","logbook","actions","getLogbookList","commit","params","get","sort","then","r","data","getLogbookById","_","id","length","Promise","reject","Error","documentTask","evidenceTask","blobTask","createdBy","updatedBy","__v","rest","Object","assign","documentTaskPath","filePath","documentTaskURL","fileURL","evidenceTaskPath","evidenceTaskURL","insertLogbook","payload","post","updateLogbook","put"],"mappings":"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","sourcesContent":["import _cloneDeep from 'lodash/cloneDeep'\n// import pMinDelay from 'p-min-delay'\nimport { GroupwareAPI } from '../../lib/axios'\n\nexport const state = () => ({\n  logbookInView: null\n})\n\nexport const mutations = {\n  setLogbookInView (state, logbook) {\n    state.logbookInView = _cloneDeep(logbook)\n  }\n}\n\nexport const actions = {\n  async getLogbookList ({ state, commit }, params = {}) {\n    const get = await GroupwareAPI.get('/logbook/', {\n      params: {\n        sort: 'dateTask,_id',\n        ...params\n      }\n    }).then(r => r.data)\n    return get\n  },\n  async getLogbookById (_, { id }) {\n    if (typeof id !== 'string' || !id.length) {\n      return Promise.reject(new Error('id is either empty or not a string'))\n    }\n    return GroupwareAPI.get(`logbook/${id}`)\n      .then(r => r.data)\n      .then((logbook) => {\n        const {\n          documentTask = {},\n          evidenceTask = {},\n          blobTask,\n          createdBy,\n          updatedBy,\n          __v,\n          ...rest\n        } = logbook\n\n        return Object.assign(\n          {},\n          rest,\n          {\n            documentTaskPath: documentTask.filePath,\n            documentTaskURL: documentTask.fileURL,\n            evidenceTaskPath: evidenceTask.filePath,\n            evidenceTaskURL: evidenceTask.fileURL\n          }\n        )\n      })\n  },\n  insertLogbook (_, payload) {\n    return GroupwareAPI.post('/logbook/', payload)\n  },\n  updateLogbook (_, { id, payload } = {}) {\n    if (!id) {\n      return Promise.reject(new Error('id must be provided'))\n    }\n    return GroupwareAPI.put(`/logbook/${id}`, payload)\n  }\n}\n"]}]}