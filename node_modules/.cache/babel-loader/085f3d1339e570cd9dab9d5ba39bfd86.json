{"remainingRequest":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/babel-loader/lib/index.js!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/eslint-loader/index.js??ref--14-0!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/src/store/modules/announcement-list.js","dependencies":[{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/src/store/modules/announcement-list.js","mtime":1673491775270},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/cache-loader/dist/cjs.js","mtime":1673491971474},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/babel-loader/lib/index.js","mtime":1673491971758},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/eslint-loader/index.js","mtime":1673491969842}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9qZHMvRG9jdW1lbnRzL2Rpc2tvbWluZm8vamRzL2RpZ2l0ZWFtL2dyb3Vwd2FyZS9ncm91cHdhcmUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvVXNlcnMvamRzL0RvY3VtZW50cy9kaXNrb21pbmZvL2pkcy9kaWdpdGVhbS9ncm91cHdhcmUvZ3JvdXB3YXJlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RTcHJlYWQyIjsKaW1wb3J0IHsgZGIsIFRpbWVzdGFtcCB9IGZyb20gJy4uLy4uL2xpYi9maXJlYmFzZSc7CmltcG9ydCB7IGZvcm1hdERhdGVMb25nIH0gZnJvbSAnLi4vLi4vbGliL2RhdGUnOwppbXBvcnQgYWRkU2Vjb25kcyBmcm9tICdkYXRlLWZucy9hZGRTZWNvbmRzJzsKaW1wb3J0IGlzQmVmb3JlIGZyb20gJ2RhdGUtZm5zL2lzQmVmb3JlJzsKCmZ1bmN0aW9uIGV4dHJhY3RGaXJlYmFzZURvY0RhdGEoZG9jKSB7CiAgdmFyIGRhdGEgPSBkb2MuZGF0YSgpOwogIHZhciBfZGF0YSRwdWJsaXNoZWRfYXQgPSBkYXRhLnB1Ymxpc2hlZF9hdCwKICAgICAgc2Vjb25kcyA9IF9kYXRhJHB1Ymxpc2hlZF9hdC5zZWNvbmRzLAogICAgICBuYW5vc2Vjb25kcyA9IF9kYXRhJHB1Ymxpc2hlZF9hdC5uYW5vc2Vjb25kczsKICB2YXIgZGF0ZSA9IG5ldyBUaW1lc3RhbXAoc2Vjb25kcywgbmFub3NlY29uZHMpLnRvRGF0ZSgpOwogIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGRhdGEpLCB7fSwgewogICAgaWQ6IGRvYy5pZCwKICAgIHB1Ymxpc2hlZF9hdDogZm9ybWF0RGF0ZUxvbmcoZGF0ZSkKICB9KTsKfQoKZXhwb3J0IHZhciBzdGF0ZSA9IGZ1bmN0aW9uIHN0YXRlKCkgewogIHJldHVybiB7CiAgICBpdGVtczogW10sCiAgICBpc0xvYWRpbmc6IHRydWUsCiAgICBsYXN0RmV0Y2hlZFRpbWVzdGFtcDogbnVsbAogIH07Cn07CmV4cG9ydCB2YXIgbXV0YXRpb25zID0gewogIHNldExvYWRpbmc6IGZ1bmN0aW9uIHNldExvYWRpbmcoc3RhdGUsIGlzTG9hZGluZykgewogICAgc3RhdGUuaXNMb2FkaW5nID0gaXNMb2FkaW5nOwogIH0sCiAgc2V0SXRlbXM6IGZ1bmN0aW9uIHNldEl0ZW1zKHN0YXRlLCBpdGVtcykgewogICAgc3RhdGUubGFzdEZldGNoZWRUaW1lc3RhbXAgPSBEYXRlLm5vdygpOwogICAgc3RhdGUuaXRlbXMgPSBpdGVtczsKICB9Cn07CmV4cG9ydCB2YXIgYWN0aW9ucyA9IHsKICBmZXRjaEl0ZW1zOiBmdW5jdGlvbiBmZXRjaEl0ZW1zKF9yZWYpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciBzdGF0ZSwgY29tbWl0LCBzaG91bGRGZXRjaCwgaXRlbXM7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGUsIGNvbW1pdCA9IF9yZWYuY29tbWl0OwoKICAgICAgICAgICAgICBpZiAoIXN0YXRlLmxhc3RGZXRjaGVkVGltZXN0YW1wKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgc2hvdWxkRmV0Y2ggPSBpc0JlZm9yZShhZGRTZWNvbmRzKHN0YXRlLmxhc3RGZXRjaGVkVGltZXN0YW1wLCAzMCksIERhdGUubm93KCkpOwoKICAgICAgICAgICAgICBpZiAoc2hvdWxkRmV0Y2gpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjb21taXQoJ3NldExvYWRpbmcnLCB0cnVlKTsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICByZXR1cm4gZGIuY29sbGVjdGlvbignYW5ub3VuY2VtZW50Jykub3JkZXJCeSgncHVibGlzaGVkX2F0JywgJ2Rlc2MnKS5nZXQoKS50aGVuKGZ1bmN0aW9uIChzbmFwc2hvdCkgewogICAgICAgICAgICAgICAgaWYgKHNuYXBzaG90LmVtcHR5KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gc25hcHNob3QuZG9jcy5tYXAoZXh0cmFjdEZpcmViYXNlRG9jRGF0YSk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDg6CiAgICAgICAgICAgICAgaXRlbXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIGNvbW1pdCgnc2V0SXRlbXMnLCBpdGVtcyk7CiAgICAgICAgICAgICAgY29tbWl0KCdzZXRMb2FkaW5nJywgZmFsc2UpOwoKICAgICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkoKTsKICB9LAogIGZldGNoSXRlbUJ5SWQ6IGZ1bmN0aW9uIGZldGNoSXRlbUJ5SWQoX3JlZjIsIF9yZWYzKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMigpIHsKICAgICAgdmFyIHN0YXRlLCBpZCwgaXRlbTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBzdGF0ZSA9IF9yZWYyLnN0YXRlOwogICAgICAgICAgICAgIGlkID0gX3JlZjMuaWQ7CgogICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0YXRlLml0ZW1zKSAmJiBzdGF0ZS5pdGVtcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIGl0ZW0gPSBzdGF0ZS5pdGVtcy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmlkID09PSBpZDsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgaWYgKCFpdGVtKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBpdGVtKTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDc7CiAgICAgICAgICAgICAgcmV0dXJuIGRiLmNvbGxlY3Rpb24oJ2Fubm91bmNlbWVudCcpLmRvYyhpZCkuZ2V0KCkudGhlbihmdW5jdGlvbiAoZG9jKSB7CiAgICAgICAgICAgICAgICBpZiAoIWRvYy5leGlzdHMpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIGV4dHJhY3RGaXJlYmFzZURvY0RhdGEoZG9jKTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICBpdGVtID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIGl0ZW0pOwoKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZTIpOwogICAgfSkpKCk7CiAgfQp9Ow=="},{"version":3,"sources":["/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/src/store/modules/announcement-list.js"],"names":["db","Timestamp","formatDateLong","addSeconds","isBefore","extractFirebaseDocData","doc","data","published_at","seconds","nanoseconds","date","toDate","id","state","items","isLoading","lastFetchedTimestamp","mutations","setLoading","setItems","Date","now","actions","fetchItems","commit","shouldFetch","collection","orderBy","get","then","snapshot","empty","docs","map","fetchItemById","Array","isArray","length","item","find","exists"],"mappings":"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","sourcesContent":["import { db, Timestamp } from '../../lib/firebase'\nimport { formatDateLong } from '../../lib/date'\nimport addSeconds from 'date-fns/addSeconds'\nimport isBefore from 'date-fns/isBefore'\n\nfunction extractFirebaseDocData (doc) {\n  const data = doc.data()\n\n  const { seconds, nanoseconds } = data.published_at\n  const date = new Timestamp(seconds, nanoseconds).toDate()\n  return {\n    ...data,\n    id: doc.id,\n    published_at: formatDateLong(date)\n  }\n}\n\nexport const state = () => ({\n  items: [],\n  isLoading: true,\n  lastFetchedTimestamp: null\n})\n\nexport const mutations = {\n  setLoading (state, isLoading) {\n    state.isLoading = isLoading\n  },\n  setItems (state, items) {\n    state.lastFetchedTimestamp = Date.now()\n    state.items = items\n  }\n}\n\nexport const actions = {\n  async fetchItems ({ state, commit }) {\n    if (state.lastFetchedTimestamp) {\n      const shouldFetch = isBefore(addSeconds(state.lastFetchedTimestamp, 30), Date.now())\n      if (!shouldFetch) {\n        return\n      }\n    }\n    commit('setLoading', true)\n\n    const items = await db.collection('announcement')\n      .orderBy('published_at', 'desc')\n      .get()\n      .then((snapshot) => {\n        if (snapshot.empty) {\n          return []\n        }\n        return snapshot.docs.map(extractFirebaseDocData)\n      })\n    commit('setItems', items)\n    commit('setLoading', false)\n  },\n  async fetchItemById ({ state }, { id }) {\n    let item\n    if (Array.isArray(state.items) && state.items.length) {\n      item = state.items.find((item) => item.id === id)\n    }\n\n    if (item) {\n      return item\n    }\n\n    item = await db.collection('announcement')\n      .doc(id)\n      .get()\n      .then((doc) => {\n        if (!doc.exists) {\n          return null\n        }\n        return extractFirebaseDocData(doc)\n      })\n\n    return item\n  }\n}\n"]}]}