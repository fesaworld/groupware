{"remainingRequest":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/babel-loader/lib/index.js!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/eslint-loader/index.js??ref--14-0!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/src/store/modules/announcement-list.js","dependencies":[{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/src/store/modules/announcement-list.js","mtime":1673491775270},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/cache-loader/dist/cjs.js","mtime":1673491971474},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/babel-loader/lib/index.js","mtime":1673491971758},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/eslint-loader/index.js","mtime":1673491969842}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcCI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9qZHMvRG9jdW1lbnRzL2Rpc2tvbWluZm8vamRzL2RpZ2l0ZWFtL2dyb3Vwd2FyZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy9qZHMvRG9jdW1lbnRzL2Rpc2tvbWluZm8vamRzL2RpZ2l0ZWFtL2dyb3Vwd2FyZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCB7IGRiLCBUaW1lc3RhbXAgfSBmcm9tICcuLi8uLi9saWIvZmlyZWJhc2UnOwppbXBvcnQgeyBmb3JtYXREYXRlTG9uZyB9IGZyb20gJy4uLy4uL2xpYi9kYXRlJzsKaW1wb3J0IGFkZFNlY29uZHMgZnJvbSAnZGF0ZS1mbnMvYWRkU2Vjb25kcyc7CmltcG9ydCBpc0JlZm9yZSBmcm9tICdkYXRlLWZucy9pc0JlZm9yZSc7CgpmdW5jdGlvbiBleHRyYWN0RmlyZWJhc2VEb2NEYXRhKGRvYykgewogIHZhciBkYXRhID0gZG9jLmRhdGEoKTsKICB2YXIgX2RhdGEkcHVibGlzaGVkX2F0ID0gZGF0YS5wdWJsaXNoZWRfYXQsCiAgICAgIHNlY29uZHMgPSBfZGF0YSRwdWJsaXNoZWRfYXQuc2Vjb25kcywKICAgICAgbmFub3NlY29uZHMgPSBfZGF0YSRwdWJsaXNoZWRfYXQubmFub3NlY29uZHM7CiAgdmFyIGRhdGUgPSBuZXcgVGltZXN0YW1wKHNlY29uZHMsIG5hbm9zZWNvbmRzKS50b0RhdGUoKTsKICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkYXRhKSwge30sIHsKICAgIGlkOiBkb2MuaWQsCiAgICBwdWJsaXNoZWRfYXQ6IGZvcm1hdERhdGVMb25nKGRhdGUpCiAgfSk7Cn0KCmV4cG9ydCB2YXIgc3RhdGUgPSBmdW5jdGlvbiBzdGF0ZSgpIHsKICByZXR1cm4gewogICAgaXRlbXM6IFtdLAogICAgaXNMb2FkaW5nOiB0cnVlLAogICAgbGFzdEZldGNoZWRUaW1lc3RhbXA6IG51bGwKICB9Owp9OwpleHBvcnQgdmFyIG11dGF0aW9ucyA9IHsKICBzZXRMb2FkaW5nOiBmdW5jdGlvbiBzZXRMb2FkaW5nKHN0YXRlLCBpc0xvYWRpbmcpIHsKICAgIHN0YXRlLmlzTG9hZGluZyA9IGlzTG9hZGluZzsKICB9LAogIHNldEl0ZW1zOiBmdW5jdGlvbiBzZXRJdGVtcyhzdGF0ZSwgaXRlbXMpIHsKICAgIHN0YXRlLmxhc3RGZXRjaGVkVGltZXN0YW1wID0gRGF0ZS5ub3coKTsKICAgIHN0YXRlLml0ZW1zID0gaXRlbXM7CiAgfQp9OwpleHBvcnQgdmFyIGFjdGlvbnMgPSB7CiAgZmV0Y2hJdGVtczogZnVuY3Rpb24gZmV0Y2hJdGVtcyhfcmVmKSB7CiAgICByZXR1cm4gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICB2YXIgc3RhdGUsIGNvbW1pdCwgc2hvdWxkRmV0Y2gsIGl0ZW1zOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlLCBjb21taXQgPSBfcmVmLmNvbW1pdDsKCiAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5sYXN0RmV0Y2hlZFRpbWVzdGFtcCkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHNob3VsZEZldGNoID0gaXNCZWZvcmUoYWRkU2Vjb25kcyhzdGF0ZS5sYXN0RmV0Y2hlZFRpbWVzdGFtcCwgMzApLCBEYXRlLm5vdygpKTsKCiAgICAgICAgICAgICAgaWYgKHNob3VsZEZldGNoKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgY29tbWl0KCdzZXRMb2FkaW5nJywgdHJ1ZSk7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDg7CiAgICAgICAgICAgICAgcmV0dXJuIGRiLmNvbGxlY3Rpb24oJ2Fubm91bmNlbWVudCcpLm9yZGVyQnkoJ3B1Ymxpc2hlZF9hdCcsICdkZXNjJykuZ2V0KCkudGhlbihmdW5jdGlvbiAoc25hcHNob3QpIHsKICAgICAgICAgICAgICAgIGlmIChzbmFwc2hvdC5lbXB0eSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gW107CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIHNuYXBzaG90LmRvY3MubWFwKGV4dHJhY3RGaXJlYmFzZURvY0RhdGEpOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgIGl0ZW1zID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBjb21taXQoJ3NldEl0ZW1zJywgaXRlbXMpOwogICAgICAgICAgICAgIGNvbW1pdCgnc2V0TG9hZGluZycsIGZhbHNlKTsKCiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfSwKICBmZXRjaEl0ZW1CeUlkOiBmdW5jdGlvbiBmZXRjaEl0ZW1CeUlkKF9yZWYyLCBfcmVmMykgewogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgIHZhciBzdGF0ZSwgaWQsIGl0ZW07CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmMi5zdGF0ZTsKICAgICAgICAgICAgICBpZCA9IF9yZWYzLmlkOwoKICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzdGF0ZS5pdGVtcykgJiYgc3RhdGUuaXRlbXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBpdGVtID0gc3RhdGUuaXRlbXMuZmluZChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbS5pZCA9PT0gaWQ7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmICghaXRlbSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA1OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgaXRlbSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA3OwogICAgICAgICAgICAgIHJldHVybiBkYi5jb2xsZWN0aW9uKCdhbm5vdW5jZW1lbnQnKS5kb2MoaWQpLmdldCgpLnRoZW4oZnVuY3Rpb24gKGRvYykgewogICAgICAgICAgICAgICAgaWYgKCFkb2MuZXhpc3RzKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBleHRyYWN0RmlyZWJhc2VEb2NEYXRhKGRvYyk7CiAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgaXRlbSA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBpdGVtKTsKCiAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUyKTsKICAgIH0pKSgpOwogIH0KfTs="},{"version":3,"sources":["/Users/jds/Documents/diskominfo/jds/digiteam/groupware/src/store/modules/announcement-list.js"],"names":["db","Timestamp","formatDateLong","addSeconds","isBefore","extractFirebaseDocData","doc","data","published_at","seconds","nanoseconds","date","toDate","id","state","items","isLoading","lastFetchedTimestamp","mutations","setLoading","setItems","Date","now","actions","fetchItems","commit","shouldFetch","collection","orderBy","get","then","snapshot","empty","docs","map","fetchItemById","Array","isArray","length","item","find","exists"],"mappings":"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","sourcesContent":["import { db, Timestamp } from '../../lib/firebase'\nimport { formatDateLong } from '../../lib/date'\nimport addSeconds from 'date-fns/addSeconds'\nimport isBefore from 'date-fns/isBefore'\n\nfunction extractFirebaseDocData (doc) {\n  const data = doc.data()\n\n  const { seconds, nanoseconds } = data.published_at\n  const date = new Timestamp(seconds, nanoseconds).toDate()\n  return {\n    ...data,\n    id: doc.id,\n    published_at: formatDateLong(date)\n  }\n}\n\nexport const state = () => ({\n  items: [],\n  isLoading: true,\n  lastFetchedTimestamp: null\n})\n\nexport const mutations = {\n  setLoading (state, isLoading) {\n    state.isLoading = isLoading\n  },\n  setItems (state, items) {\n    state.lastFetchedTimestamp = Date.now()\n    state.items = items\n  }\n}\n\nexport const actions = {\n  async fetchItems ({ state, commit }) {\n    if (state.lastFetchedTimestamp) {\n      const shouldFetch = isBefore(addSeconds(state.lastFetchedTimestamp, 30), Date.now())\n      if (!shouldFetch) {\n        return\n      }\n    }\n    commit('setLoading', true)\n\n    const items = await db.collection('announcement')\n      .orderBy('published_at', 'desc')\n      .get()\n      .then((snapshot) => {\n        if (snapshot.empty) {\n          return []\n        }\n        return snapshot.docs.map(extractFirebaseDocData)\n      })\n    commit('setItems', items)\n    commit('setLoading', false)\n  },\n  async fetchItemById ({ state }, { id }) {\n    let item\n    if (Array.isArray(state.items) && state.items.length) {\n      item = state.items.find((item) => item.id === id)\n    }\n\n    if (item) {\n      return item\n    }\n\n    item = await db.collection('announcement')\n      .doc(id)\n      .get()\n      .then((doc) => {\n        if (!doc.exists) {\n          return null\n        }\n        return extractFirebaseDocData(doc)\n      })\n\n    return item\n  }\n}\n"]}]}