{"remainingRequest":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/src/App.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/src/App.vue","mtime":1673491775258},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/css-loader/dist/cjs.js","mtime":1673491970692},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1673491936529},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/postcss-loader/src/index.js","mtime":1673491966590},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/sass-loader/dist/cjs.js","mtime":1673491959555},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/cache-loader/dist/cjs.js","mtime":1673491971474},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/groupware/node_modules/vue-loader/lib/index.js","mtime":1673491936504}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICcuL3N0eWxlcy9hcHAuc2Nzcyc7Cg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuHA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\n  <div id=\"app\">\n<!--    <loading ref=\"loading\" />-->\n    <div v-if=\"alertUpdate\" class=\"bg-brand-yellow-darkest\">\n      <div class=\"container mx-auto\">\n        <div class=\"flex px-6 py-4\">\n          <div class=\"text-sm w-full\">\n            Ada update versi terbaru.\n            <button @click=\"refreshApp\" class=\"ml-2 bg-brand-blue text-white font-bold py-1 px-4 rounded focus:outline-none focus:shadow-outline\" type=\"button\">\n              Update\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    <template v-if=\"!loading\">\n      <transition name=\"page\" mode=\"out-in\">\n        <component :is=\"layout\" v-if=\"layout\" />\n      </transition>\n    </template>\n  </div>\n</template>\n\n<script>\n// import Loading from './components/Loading'\n\n// Load layout components dynamically.\nimport { mapGetters } from 'vuex'\n\nconst requireContext = require.context('@/layouts', false, /.*\\.vue$/)\n\nconst layouts = requireContext.keys()\n  .map(file =>\n    [file.replace(/(^.\\/)|(\\.vue$)/g, ''), requireContext(file)]\n  )\n  .reduce((components, [name, component]) => {\n    components[name] = component.default || component\n    return components\n  }, {})\n\nexport default {\n  el: '#app',\n\n  components: {\n    // Loading\n  },\n\n  data () {\n    return {\n      layout: null,\n      defaultLayout: 'default',\n      alertUpdate: false,\n      refreshing: false,\n      registration: null\n    }\n  },\n\n  mounted () {\n    document.body.classList.add('loading')\n\n    // Listen for swUpdated event and display refresh snackbar as required.\n    document.addEventListener('swUpdated', this.showRefreshUI, { once: true })\n\n    // Refresh all open app tabs when a new service worker is installed.\n    navigator.serviceWorker.addEventListener('controllerchange', () => {\n      if (this.refreshing) return\n      this.refreshing = true\n      window.location.reload()\n    })\n  },\n\n  computed: mapGetters({\n    loading: 'auth/loading'\n  }),\n\n  watch: {\n    loading (value) {\n      if (value === false) {\n        document.body.classList.remove('loading')\n        document.getElementById('splashScreen').style.setProperty('display', 'none')\n      }\n    }\n  },\n\n  methods: {\n    /**\n     * Set the application layout.\n     *\n     * @param {String} layout\n     */\n    setLayout (layout) {\n      if (!layout || !layouts[layout]) {\n        layout = this.defaultLayout\n      }\n\n      this.layout = layouts[layout]\n    },\n\n    showRefreshUI (e) {\n      // Display a snackbar inviting the user to refresh/reload the app due\n      // to an app update being available.\n      // The new service worker is installed, but not yet active.\n      // Store the ServiceWorkerRegistration instance for later use.\n      this.registration = e.detail\n\n      this.alertUpdate = true\n    },\n\n    refreshApp () {\n      this.alertUpdate = false\n      // Protect against missing registration.waiting.\n      if (!this.registration || !this.registration.waiting) { return }\n      this.registration.waiting.postMessage('skipWaiting')\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import './styles/app.scss';\n</style>\n"]}]}