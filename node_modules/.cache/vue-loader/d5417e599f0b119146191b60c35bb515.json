{"remainingRequest":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/jds/Documents/diskominfo/jds/digiteam/groupware/src/components/Dashboard/LogbookHeatmaps/MonthlyHeatmap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/src/components/Dashboard/LogbookHeatmaps/MonthlyHeatmap.vue","mtime":1673491775261},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/cache-loader/dist/cjs.js","mtime":1673491971474},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/babel-loader/lib/index.js","mtime":1673491971758},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/cache-loader/dist/cjs.js","mtime":1673491971474},{"path":"/Users/jds/Documents/diskominfo/jds/digiteam/groupware/node_modules/vue-loader/lib/index.js","mtime":1673491936504}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBpc1ZhbGlkIGZyb20gJ2RhdGUtZm5zL2lzVmFsaWQnCmltcG9ydCBmb3JtYXREYXRlIGZyb20gJ2RhdGUtZm5zL2Zvcm1hdCcKaW1wb3J0IGdldERheXNJbk1vbnRoIGZyb20gJ2RhdGUtZm5zL2dldERheXNJbk1vbnRoJwppbXBvcnQgZGlmZmVyZW5jZUluRGF5cyBmcm9tICdkYXRlLWZucy9kaWZmZXJlbmNlSW5EYXlzJwppbXBvcnQgc3RhcnRPZldlZWsgZnJvbSAnZGF0ZS1mbnMvc3RhcnRPZldlZWsnCmltcG9ydCBnZXRXZWVrc0luTW9udGggZnJvbSAnZGF0ZS1mbnMvZ2V0V2Vla3NJbk1vbnRoJwppbXBvcnQgaXNXZWVrZW5kIGZyb20gJ2RhdGUtZm5zL2lzV2Vla2VuZCcKaW1wb3J0IGlkIGZyb20gJ2RhdGUtZm5zL2xvY2FsZS9pZCcKCmltcG9ydCB7IGZvcm1hdERhdGVTaG9ydCB9IGZyb20gJy4uLy4uLy4uL2xpYi9kYXRlJwppbXBvcnQgeyBtYXBHZXR0ZXJzLCBtYXBTdGF0ZSB9IGZyb20gJ3Z1ZXgnCgpleHBvcnQgZGVmYXVsdCB7CiAgaW5qZWN0OiB7CiAgICBoZWF0bWFwQ29sb3JDb25maWc6IHsKICAgICAgZnJvbTogJ2hlYXRtYXBDb2xvckNvbmZpZycsCiAgICAgIGRlZmF1bHQ6ICgpID0+IFtdCiAgICB9CiAgfSwKICBwcm9wczogewogICAgaXNMb2FkaW5nOiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9LAogICAgbW9udGg6IHsKICAgICAgdHlwZTogTnVtYmVyCiAgICB9LAogICAgeWVhcjogewogICAgICB0eXBlOiBOdW1iZXIKICAgIH0KICB9LAogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgcmVjdEdhcDogNiwKICAgICAgcmVjdFNpemU6IDYwLAogICAgICBkZWZhdWx0Q29sb3I6ICcjRUNFRkYxJwogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGlzTW9udGhBbmRZZWFyRGVmaW5lZCAoKSB7CiAgICAgIGNvbnN0IHsgbW9udGgsIHllYXIgfSA9IHRoaXMKICAgICAgY29uc3QgaXNOdW1iZXIgPSB0eXBlb2YgbW9udGggPT09ICdudW1iZXInICYmIHR5cGVvZiB5ZWFyID09PSAnbnVtYmVyJwogICAgICBjb25zdCBpc1ZhbGlkRGF0ZSA9IGlzVmFsaWQobmV3IERhdGUoeWVhciwgbW9udGgpKQogICAgICByZXR1cm4gaXNOdW1iZXIgJiYgaXNWYWxpZERhdGUKICAgIH0sCiAgICAuLi5tYXBHZXR0ZXJzKCdsb2dib29rLWhlYXRtYXAnLCBbCiAgICAgICdnZXRUYXNrQ291bnRCeURhdGUnCiAgICBdKSwKICAgIC4uLm1hcFN0YXRlKCdsb2dib29rLWhlYXRtYXAnLCB7CiAgICAgIGhlYXRtYXBEYXRhIChzdGF0ZSkgewogICAgICAgIGlmICghdGhpcy5pc01vbnRoQW5kWWVhckRlZmluZWQpIHsKICAgICAgICAgIHJldHVybiBudWxsCiAgICAgICAgfQogICAgICAgIGNvbnN0IGtleSA9IGAke3BhcnNlSW50KHRoaXMueWVhcil9LyR7cGFyc2VJbnQodGhpcy5tb250aCl9YAogICAgICAgIHJldHVybiBzdGF0ZS5kYXRhQnlNb250aFllYXJba2V5XSB8fCBudWxsCiAgICAgIH0KICAgIH0pLAogICAgc3RhcnRPZk1vbnRoT2Zmc2V0SW5EYXlzICgpIHsKICAgICAgaWYgKCF0aGlzLmlzTW9udGhBbmRZZWFyRGVmaW5lZCkgewogICAgICAgIHJldHVybiAwCiAgICAgIH0KICAgICAgY29uc3QgbW9udGhTdGFydCA9IG5ldyBEYXRlKHRoaXMueWVhciwgdGhpcy5tb250aCwgMSkKICAgICAgY29uc3QgY2FsZW5kYXJTdGFydCA9IHN0YXJ0T2ZXZWVrKG1vbnRoU3RhcnQsIHsKICAgICAgICB3ZWVrU3RhcnRzT246IDEKICAgICAgfSkKICAgICAgcmV0dXJuIGRpZmZlcmVuY2VJbkRheXMobW9udGhTdGFydCwgY2FsZW5kYXJTdGFydCkKICAgIH0sCiAgICBudW1PZldlZWtzICgpIHsKICAgICAgaWYgKCF0aGlzLmlzTW9udGhBbmRZZWFyRGVmaW5lZCkgewogICAgICAgIHJldHVybiAwCiAgICAgIH0KICAgICAgcmV0dXJuIGdldFdlZWtzSW5Nb250aChuZXcgRGF0ZSh0aGlzLnllYXIsIHRoaXMubW9udGgpKQogICAgfSwKICAgIG51bU9mRGF5cyAoKSB7CiAgICAgIGlmICghdGhpcy5pc01vbnRoQW5kWWVhckRlZmluZWQpIHsKICAgICAgICByZXR1cm4gMAogICAgICB9CiAgICAgIHJldHVybiBnZXREYXlzSW5Nb250aChuZXcgRGF0ZSh0aGlzLnllYXIsIHRoaXMubW9udGgpKQogICAgfSwKCiAgICB2aWV3Qm94UmVjdFNpemUgKCkgewogICAgICAvLyA3IGlzIG1heGltdW0gbnVtIG9mIHdlZWtzIGluIG1vbnRoICg2KSArIDEgY29sdW1uIGZvciBkYXkgbmFtZQogICAgICBjb25zdCBtYXhOdW1PZkNvbHVtbnMgPSA3CiAgICAgIGNvbnN0IHdpZHRoID0gKHRoaXMucmVjdFNpemUgKiBtYXhOdW1PZkNvbHVtbnMpICsgKHRoaXMucmVjdEdhcCAqIChtYXhOdW1PZkNvbHVtbnMgKyAxKSkKCiAgICAgIC8vIDcgaXMgbnVtYmVyIG9mIGRheXMgd2l0aGluIHdlZWsKICAgICAgLy8gOCBpcyBudW1iZXIgb2YgZ2FwIGZvciA3IHJvd3MKICAgICAgY29uc3QgaGVpZ2h0ID0gKHRoaXMucmVjdFNpemUgKiA3KSArICh0aGlzLnJlY3RHYXAgKiA4KQogICAgICByZXR1cm4gYDAgMCAke3dpZHRofSAke2hlaWdodH1gCiAgICB9LAogICAgbW9udGhOYW1lICgpIHsKICAgICAgcmV0dXJuIGZvcm1hdERhdGUobmV3IERhdGUodGhpcy55ZWFyLCB0aGlzLm1vbnRoKSwgJ01NTU0nLCB7CiAgICAgICAgbG9jYWxlOiBpZAogICAgICB9KQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZ2V0RGF5TmFtZSAoZGF5SW5kZXgpIHsKICAgICAgLy8gbW9uZGF5IGlzIHplcm8gaW4gZGF0ZS1mbnMKICAgICAgY29uc3QgaSA9IGRheUluZGV4ID09PSA3ID8gMCA6IGRheUluZGV4CiAgICAgIHJldHVybiBpZC5sb2NhbGl6ZS5kYXkoaSwgewogICAgICAgIHdpZHRoOiAnc2hvcnQnCiAgICAgIH0pCiAgICB9LAogICAgZ2V0RGF5TmFtZVRleHRZIChkYXlJbmRleCkgewogICAgICBjb25zdCByZWN0WSA9IHRoaXMuZ2V0UmVjdFkoZGF5SW5kZXgpCiAgICAgIC8vIDEwIGlzIGhhbGYgb2YgZm9udCBzaXplCiAgICAgIHJldHVybiAxMCArIHJlY3RZICsgTWF0aC5mbG9vcih0aGlzLnJlY3RTaXplIC8gMikKICAgIH0sCiAgICBnZXREYXlOYW1lVGV4dFggKGRheUluZGV4KSB7CiAgICAgIHJldHVybiAwCiAgICB9LAogICAgZ2V0UmVjdFkgKGl0ZW1JbmRleCkgewogICAgICByZXR1cm4gdGhpcy5yZWN0R2FwICsgKChpdGVtSW5kZXggJSA3KSkgKiAodGhpcy5yZWN0U2l6ZSArIHRoaXMucmVjdEdhcCkKICAgIH0sCiAgICBnZXRSZWN0WCAoaXRlbUluZGV4KSB7CiAgICAgIGNvbnN0IGNvbE51bSA9IE1hdGguZmxvb3IoaXRlbUluZGV4IC8gNykKICAgICAgcmV0dXJuIHRoaXMucmVjdEdhcCArIChjb2xOdW0gKiAodGhpcy5yZWN0U2l6ZSArIHRoaXMucmVjdEdhcCkpCiAgICB9LAoKICAgIGdldFRvb2x0aXBDb250ZW50QnlEYXRlTnVtIChkYXRlTnVtKSB7CiAgICAgIGNvbnN0IGRhdGVPYmogPSBuZXcgRGF0ZSh0aGlzLnllYXIsIHRoaXMubW9udGgsIGRhdGVOdW0pCiAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBmb3JtYXREYXRlU2hvcnQoZGF0ZU9iaikKCiAgICAgIGNvbnN0IHRhc2tDb3VudCA9IHRoaXMuZ2V0VGFza0NvdW50QnlEYXRlKGRhdGVPYmopCiAgICAgIGlmICh0YXNrQ291bnQgPiAwKSB7CiAgICAgICAgcmV0dXJuIGAke3Rhc2tDb3VudH0gbGFwb3JhbiBwYWRhICR7ZGF0ZVN0cmluZ31gCiAgICAgIH0KCiAgICAgIGlmIChpc1dlZWtlbmQoZGF0ZU9iaikpIHsKICAgICAgICByZXR1cm4gZGF0ZVN0cmluZwogICAgICB9CiAgICAgIHJldHVybiBgQmVsdW0gYWRhIGxhcG9yYW4gcGFkYSAke2RhdGVTdHJpbmd9YAogICAgfSwKICAgIGdldEhlYXRDb2xvckJ5RGF0ZU51bSAoZGF0ZU51bSkgewogICAgICBpZiAodGhpcy5pc0xvYWRpbmcpIHsKICAgICAgICByZXR1cm4gdGhpcy5kZWZhdWx0Q29sb3IKICAgICAgfQogICAgICBjb25zdCBkYXRlT2JqID0gbmV3IERhdGUodGhpcy55ZWFyLCB0aGlzLm1vbnRoLCBkYXRlTnVtKQogICAgICBjb25zdCB0YXNrQ291bnQgPSB0aGlzLmdldFRhc2tDb3VudEJ5RGF0ZShkYXRlT2JqKQogICAgICBjb25zdCBjb2xvciA9IHRoaXMuZ2V0Q29sb3JCeVRhc2tDb3VudCh0YXNrQ291bnQpCiAgICAgIHJldHVybiBjb2xvcgogICAgfSwKICAgIGdldENvbG9yQnlUYXNrQ291bnQgKGNvdW50KSB7CiAgICAgIGNvbnN0IHsgaGVhdG1hcENvbG9yQ29uZmlnIH0gPSB0aGlzCiAgICAgIGlmICghQXJyYXkuaXNBcnJheShoZWF0bWFwQ29sb3JDb25maWcpIHx8ICFoZWF0bWFwQ29sb3JDb25maWcubGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdENvbG9yCiAgICAgIH0KCiAgICAgIGxldCBjb2xvcgogICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gaGVhdG1hcENvbG9yQ29uZmlnLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgY29uc3QgbWluVGFzayA9IGhlYXRtYXBDb2xvckNvbmZpZ1tpXVswXQogICAgICAgIGNvbnN0IG1heFRhc2sgPSBpIDwgbGVuIC0gMQogICAgICAgICAgPyBoZWF0bWFwQ29sb3JDb25maWdbaSArIDFdWzBdCiAgICAgICAgICA6IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSCgogICAgICAgIGlmIChjb3VudCA+PSBtaW5UYXNrICYmIGNvdW50IDwgbWF4VGFzaykgewogICAgICAgICAgY29sb3IgPSBoZWF0bWFwQ29sb3JDb25maWdbaV1bMV0KICAgICAgICAgIGJyZWFrCiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBjb2xvciB8fCB0aGlzLmRlZmF1bHRDb2xvcgogICAgfSwKICAgIHJhbmRvbWl6ZURlbGF5ICgpIHsKICAgICAgcmV0dXJuIChNYXRoLnJhbmRvbSgpICoqIDQpICogNTAwMAogICAgfQogIH0KfQo="},{"version":3,"sources":["MonthlyHeatmap.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MonthlyHeatmap.vue","sourceRoot":"src/components/Dashboard/LogbookHeatmaps","sourcesContent":["<template>\n  <div class=\"monthly-heatmap\">\n    <span\n      class=\"monthly-heatmap__month-name\">\n      {{ monthName }}\n    </span>\n    <svg\n      :viewBox=\"viewBoxRectSize\"\n      class=\"monthly-heatmap__blocks\"\n      :key=\"`${year}/${month}`\">\n      <g v-for=\"dayIndex in 7\"\n        :key=\"`day:${dayIndex}`\"\n        class=\"monthly-heatmap__block\"\n        fill=\"transparent\"\n      >\n        <rect\n          :width=\"rectSize\"\n          :height=\"rectSize\"\n          :x=\"getRectX(dayIndex - 1)\"\n          :y=\"getRectY(dayIndex - 1)\"\n        />\n        <text\n          :x=\"getDayNameTextX(dayIndex - 1)\"\n          :y=\"getDayNameTextY(dayIndex - 1)\"\n          fill=\"#bbb\"\n          style=\"font: bold 20px sans-serif; text-transform: uppercase;\"\n        >\n          {{ getDayName(dayIndex) }}\n        </text>\n      </g>\n      <g\n        v-for=\"(dateNum, index) in numOfDays\"\n        :key=\"dateNum\"\n        class=\"monthly-heatmap__block\"\n        fill=\"transparent\">\n        <rect\n          :key=\"`rect:${index}`\"\n          :class=\"{\n            'monthly-heatmap__block__rect': true,\n            'is-loading': isLoading\n          }\"\n          :style=\"{\n            fill: getHeatColorByDateNum(dateNum),\n            animationDelay: `${randomizeDelay(index)}ms`\n          }\"\n          :width=\"rectSize\"\n          :height=\"rectSize\"\n          :rx=\"rectSize / 10\"\n          :ry=\"rectSize / 10\"\n          :x=\"getRectX(7 + index + startOfMonthOffsetInDays)\"\n          :y=\"getRectY(index + startOfMonthOffsetInDays)\" />\n        <title>\n          {{ getTooltipContentByDateNum(dateNum) }}\n        </title>\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport isValid from 'date-fns/isValid'\nimport formatDate from 'date-fns/format'\nimport getDaysInMonth from 'date-fns/getDaysInMonth'\nimport differenceInDays from 'date-fns/differenceInDays'\nimport startOfWeek from 'date-fns/startOfWeek'\nimport getWeeksInMonth from 'date-fns/getWeeksInMonth'\nimport isWeekend from 'date-fns/isWeekend'\nimport id from 'date-fns/locale/id'\n\nimport { formatDateShort } from '../../../lib/date'\nimport { mapGetters, mapState } from 'vuex'\n\nexport default {\n  inject: {\n    heatmapColorConfig: {\n      from: 'heatmapColorConfig',\n      default: () => []\n    }\n  },\n  props: {\n    isLoading: {\n      type: Boolean,\n      default: false\n    },\n    month: {\n      type: Number\n    },\n    year: {\n      type: Number\n    }\n  },\n  data () {\n    return {\n      rectGap: 6,\n      rectSize: 60,\n      defaultColor: '#ECEFF1'\n    }\n  },\n  computed: {\n    isMonthAndYearDefined () {\n      const { month, year } = this\n      const isNumber = typeof month === 'number' && typeof year === 'number'\n      const isValidDate = isValid(new Date(year, month))\n      return isNumber && isValidDate\n    },\n    ...mapGetters('logbook-heatmap', [\n      'getTaskCountByDate'\n    ]),\n    ...mapState('logbook-heatmap', {\n      heatmapData (state) {\n        if (!this.isMonthAndYearDefined) {\n          return null\n        }\n        const key = `${parseInt(this.year)}/${parseInt(this.month)}`\n        return state.dataByMonthYear[key] || null\n      }\n    }),\n    startOfMonthOffsetInDays () {\n      if (!this.isMonthAndYearDefined) {\n        return 0\n      }\n      const monthStart = new Date(this.year, this.month, 1)\n      const calendarStart = startOfWeek(monthStart, {\n        weekStartsOn: 1\n      })\n      return differenceInDays(monthStart, calendarStart)\n    },\n    numOfWeeks () {\n      if (!this.isMonthAndYearDefined) {\n        return 0\n      }\n      return getWeeksInMonth(new Date(this.year, this.month))\n    },\n    numOfDays () {\n      if (!this.isMonthAndYearDefined) {\n        return 0\n      }\n      return getDaysInMonth(new Date(this.year, this.month))\n    },\n\n    viewBoxRectSize () {\n      // 7 is maximum num of weeks in month (6) + 1 column for day name\n      const maxNumOfColumns = 7\n      const width = (this.rectSize * maxNumOfColumns) + (this.rectGap * (maxNumOfColumns + 1))\n\n      // 7 is number of days within week\n      // 8 is number of gap for 7 rows\n      const height = (this.rectSize * 7) + (this.rectGap * 8)\n      return `0 0 ${width} ${height}`\n    },\n    monthName () {\n      return formatDate(new Date(this.year, this.month), 'MMMM', {\n        locale: id\n      })\n    }\n  },\n  methods: {\n    getDayName (dayIndex) {\n      // monday is zero in date-fns\n      const i = dayIndex === 7 ? 0 : dayIndex\n      return id.localize.day(i, {\n        width: 'short'\n      })\n    },\n    getDayNameTextY (dayIndex) {\n      const rectY = this.getRectY(dayIndex)\n      // 10 is half of font size\n      return 10 + rectY + Math.floor(this.rectSize / 2)\n    },\n    getDayNameTextX (dayIndex) {\n      return 0\n    },\n    getRectY (itemIndex) {\n      return this.rectGap + ((itemIndex % 7)) * (this.rectSize + this.rectGap)\n    },\n    getRectX (itemIndex) {\n      const colNum = Math.floor(itemIndex / 7)\n      return this.rectGap + (colNum * (this.rectSize + this.rectGap))\n    },\n\n    getTooltipContentByDateNum (dateNum) {\n      const dateObj = new Date(this.year, this.month, dateNum)\n      const dateString = formatDateShort(dateObj)\n\n      const taskCount = this.getTaskCountByDate(dateObj)\n      if (taskCount > 0) {\n        return `${taskCount} laporan pada ${dateString}`\n      }\n\n      if (isWeekend(dateObj)) {\n        return dateString\n      }\n      return `Belum ada laporan pada ${dateString}`\n    },\n    getHeatColorByDateNum (dateNum) {\n      if (this.isLoading) {\n        return this.defaultColor\n      }\n      const dateObj = new Date(this.year, this.month, dateNum)\n      const taskCount = this.getTaskCountByDate(dateObj)\n      const color = this.getColorByTaskCount(taskCount)\n      return color\n    },\n    getColorByTaskCount (count) {\n      const { heatmapColorConfig } = this\n      if (!Array.isArray(heatmapColorConfig) || !heatmapColorConfig.length) {\n        return this.defaultColor\n      }\n\n      let color\n      for (let i = 0, len = heatmapColorConfig.length; i < len; i++) {\n        const minTask = heatmapColorConfig[i][0]\n        const maxTask = i < len - 1\n          ? heatmapColorConfig[i + 1][0]\n          : Number.MAX_SAFE_INTEGER\n\n        if (count >= minTask && count < maxTask) {\n          color = heatmapColorConfig[i][1]\n          break\n        }\n      }\n      return color || this.defaultColor\n    },\n    randomizeDelay () {\n      return (Math.random() ** 4) * 5000\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@keyframes rotatingRect {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.monthly-heatmap {\n  max-width: 200px;\n  @apply inline-flex flex-col justify-between items-stretch;\n\n  &__blocks {\n    display: inline;\n    @apply w-full;\n  }\n\n  &__block {\n    transform-origin: 0 0;\n    @apply border-none bg-transparent;\n\n    &__rect {\n      transform-origin: center;\n      transform-box: fill-box;\n      cursor: pointer;\n      @apply border-none stroke-0;\n\n      &:hover {\n        stroke: rgb(0, 0, 0, 0.2);\n        stroke-width: 6;\n      }\n\n      &.is-loading {\n        animation: rotatingRect 1s infinite alternate ease-out;\n      }\n    }\n  }\n\n  &__month-name {\n    @apply block mb-2\n    text-left text-sm\n    text-green-600 font-bold;\n  }\n}\n</style>\n"]}]}